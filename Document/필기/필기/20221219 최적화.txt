오후 6:16 2022-12-19
최적화


코드 단
하드웨어 단
네트워크 단


코드단

요샌 컴파일러가 워낙 잘해줘서 어설프게 코드단에서 어셈블리 관련 최적화는 생각하려 하지않는것이 좋을수도 있다.
더 빠르다 해도 극적인 변화가 일어나지 않을 것.

연산을 안하는게 무조건 빠름
매 프레임마다 검사할지, 특정 조건에서 검사할 지
, 코루틴처럼 쉬면서 종종 검사하는지

코루틴은 태스크매니저 방식으로 작동하는것
매 프레임마다 코루틴을 검사하는 방식
코루틴 안에서 카운터가 돌아가고 있고,
WaitForSeconds(1f) 면 1초가 될 때까지 계속 매프레임마다 돌아간다.

진짜 멀티태스킹으로 할 수 있으면 더 좋음
멀티코어를 쓰면 그거보다도 더 좋음
컴퓨팅 프로그래밍(그래픽카드에 직접 명령) 하면 훠어어얼씬 좋음

그런데 이것도 잘 모르고 어설프게 하면 오히려 병목이 생겨서 더 안좋을 수 있다.

Cpu랑 Gpu 병목 생기는것도 같은 맥락

유니티에서는
GetComponent를 최대한 안쓰는것이 좋다. 굉장히 느림



렌더링
부하가 걸리는 곳은 크게 3군데
1. 메모리 -> 그래픽카드 옮길 때
2. 버텍스쉐이더가 돌아갈 때
3. 픽셀쉐이더가 돌아갈 때

근데 어차피 유니티에서는 해결하기 힘들다.
연산을 할것 안할것을 가려서 최대한 연산을 줄이는 것 자체를 줄이는게 무조건 제일 좋음.

1. 그릴 개수 자체를 줄이는 것
오클루전 컬링, 백페이스 컬링, 프로스텀 컬링은
유니티에서 알아서 자동으로 해준다. 이것도 우리가 뭘 따로 해줄 것은 없음.

우리가 할 수 있는것은 컬링을 할 개수자체를 줄여주는 것. >> 이것도 여전히 알고리즘을 잘 못 짜면 더 느려질 수 있다.

컬링 개수 제거하는 것도 컬링이 할 수 있는 정도의 수준이면 의미없고, 최소한 오픈월드의 쿼드트리 수준까지는 가야 한다.

통째로 날리면 일단 무조건 1프레임이라도 빨라지기는 한다.


둠1 : 가로로 380픽셀. 가로 맨 왼쪽부터 오른쪽 끝까지 레이를 하나씩 쭉 다 쏘고, 그 맞은놈만 그린다.
세로로는 레이를 쏘지 않기때문에 둠1에는 2층이 없다.


퀘이크1 : BSP(이진 공간분할) 로 한다. 성능자체는 쿼드트리가 좋지만, 창문 밖을 그리는 등을 표현할 수 있음.

바이오하자드 : 창문에 그림을 보여줌.


자동으로 트리를 만들기는 힘들지만, 미리 같은 레벨의 방, 지역을 묶어서 쪼개두고 해당하지 않는 것은 날린다.

LOD : 최적화에 영향을 많이 줌. 그런데 이건 그래픽팀이 그려줘야 함.

멀리 있는 객체들 : 애니메이션 끄기
안보이는 애들 : 꺼버리기

쿼드트리를 쓰는 이유 : 그 구역 안에있는 애들만 관리하기 위해서

결국은 목록관리가 핵심이다.



실제로 쓸 수 있는 방법들은 유니티에 기본적으로 들어있는 설정값을 낮추는 방법이다.

기본적으로는 거의 풀옵션으로 되어있음.


텍스쳐 임포트
1. 텍스쳐 해상도가 2의 승수배 로 맞추기
2. 아틀라스 만들기 (텍스쳐 이미지 한장에 여러그림 넣어어 받아오기) >> uv 맵핑이 필요함.
3. 이미지값에 알파값이 없다면 Alpha Source None
4. Advanced 에 Generate Mip Maps 
LOD 자동으로 만들어주는 옵션. 안쓸거면 체크해제 (지혼자 계산 거리계산하고 앉아있음)


동영상, 사운드
1. 스테레오 아니면 무조건 모노로 하기

오브젝트
1. 움직일 일 없는 오브젝트들은 무조건 Static을 켜면 좋다.

매쉬
1. 임포트 할 때 확인해야 함
노말 계산, 빛계산 등등
2. 그림자 연산 무조건 확인
Cast Shadows : 내 그림자가 생길건지
Receive Shadows : 남의 그림자가 나한테 드리울지
3. Probe 안쓸거면 Off (Lite Bake할 때 쓰면 좋긴함)
4. Additional Settings 에서 Dynamic Occlusion : 없어도 될만한거는 끄기(굳이 연산할 필요는 없다)


프리팹
1. 유니티가 알아서 최적화를 해서 그린다.
그냥 게임에 보이는건 무조건 프리팹이라고 생각하기.


콜라이더
1. aabb 검사할 때는 BoxCollider가 빠름 
(웬만하면 박스가 빠르다고 생각하면 편함)
2. obb로 검사할 때는 SphereCollider가 더 빠름

3. 큰 몸통에 들어갔을때만 작은 콜라이더 켜기
4. 웬만하면 메쉬콜라이더는 X
5. 물리연산 안해도 되는거면 IsTrigger가 좀 더 비용이 싸다.


머테리얼
셰이더
1. Standard 가 들어가는 순간 Physicall Based로 돌아간다. 이게 필요없다면 Pong셰이더라던지 다른걸로 바꿔주는게 좋음.
메인 그래픽은 게임풍을 해치지 않는 한에서 제일 최적화 한 셰이더로 다 바꿔서 해야함

2. 드로우 콜
그림을 그려라고 명령을 내리는 회수
머테리얼 개수가 적으면 적을수록 빠르다.
OpenGL이나 DirextX는 드로우콜을 직접 정해놓고 콜을 하는식으로 최적화를 할 수 있는데, 유니티는 그게 안됨.
그래서 머테리얼을 하나로 만들어두면 드로우콜이 한번으로 끝난다.
드로우콜은 셰이더 코드와도 직접적인 연관이 있다.


카메라
1. 클리핑
멀리까지 볼 필요 없으면 낮추면 좋다.
Fov를 잘쓰면 가까이만 보이게 해놨는데 멀리까지 보는거처럼 만들 수 있다.

2. Rendering Path
Forward, Deferred 정도는 설정해두면 좋다.
Forward : 기본값, 물체를 그리는 과정에서 조명계산을 한다. 가려진 물체도 검사함
Deferred : 조명연산을 마지막에 한다.
대신 조명연산을 위한 정보를 매 픽셀당 마지막까지 가지고 있어야 하므로, 해상도가 커질수록 버퍼가 굉장히 많이 필요해서 퍼포먼스가 많이 필요하다.
조명이 많고, 물체가 많을수록 Deferred가 좋음
카툰렌더링 같은건 Directional Light 하나만있어도 티가 잘 나서 Forward가 좋음.

3. 탑뷰 방식 같은경우(가려질 일이 잘 없는경우)에는 Occlusion Culling 꺼버려도 괜찮음.
FPS 경우는 효과가 좋음

4. HDR, MSAA(안티앨리어싱) 도 안쓰면 끄기


Project Setting
피직스 : 레이어마스크만 잘써도 좋다


모델
임포트 할 때 필요없는건 그냥 끄기
카메라, 조명정도만 꺼도 됨


UI
캔버스를 분산시켜서 만드는게 퍼포먼스가 좋다.


Debug.Log 빌드할때 꼭 지우기.
문자열 관리할 때 스트링빌더 잘쓰기



