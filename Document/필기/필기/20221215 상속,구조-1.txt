오후 6:14 2022-12-15

Input도 한군데서 모아서 만들어야 한다.
Input을 아무데서나 받을 수 있기 때문에 여기저기서 사용하는데, 이렇게 되면 관리가 힘들고 꼬일 수가 있다.

사용하기 편한건 내부적으로는 복잡할 수밖에 없다.



인풋매니저는 다른 프로젝트에서도 쓰일 수 있어야 하므로, 입력받은 내용에 대한 처리가 들어가면 안된다.
입력을 감지하면 '입력이 들어왔습니다' 까지만 해야함

GetCompnent, gameObject, transform 은 그냥 무조건 this를 붙여야만 한다고 생각하는게 좋다.


체계적으로 짜면 좋은 점
모르는 사람이랑 짜도 규칙만 잘 지키면 협업이 쉽다.


GameManager는 한번정도는 Player를 FInd해도 상관없다.(인스팩터도 상관없음) 대신 다른 모든애들은 게임매니저에게 Player를 달라고 해야함.


기획자가 건드릴 필요가 있는 것들 : 인스팩터에서 관리
건드릴 필요 없는것들 : 코드에서 관리


if(player.GetStamina() <= 1f)
if(player.StaminaIsEmpty())
아래쪽이 훨씬 낫다.

if(Player.StaminaEmpty()) {
    SkillOff();
}

이거를 SkillOnOff(Player.StaminaEmpty()); 로 바꿀 수 있다. 함수 인자로 bool값 받으면 됨

MakeTree();
if(tree != null){

}

이거를 MakeTree 를 bool 반환해서
if(MakeTree()){
}
로 가능.


UI는 출력만 해줘야 함
무조건 인자로 받아서 처리한다.
직접 참조하는 순간 값을 바꿀 수 있는 권한이 생긴다.

원초적인 제일 밑단이 간부급에서 보이면 안된다.

작업이 끝나고 난 후 코드가 돌아는 간다면
리팩토링을 한다.
