설계 : 코드를 어떻게 배치할것이냐 에 대한 의사결정

>> 변경에 초점을 맞춘다. = Dependency(의존성)
B가 변경될 때, A도 같이 변경될 수 있을 때 
A - - - dependens on - - - > B

클래스 사이의 의존성 종류

A -------> B    연관관계(Association) 
영구적으로 a가 b로 갈 수 있다. 
A가 B를 알고있는 것(B를 객체참조)

A - - - -> B    의존관계(Dependency) 
사용할 때만 잠깐.
파라미터, return 타입 등 잠깐만 등장하는 것

A-->>B 상속관계(Inheritance)

A -->>B실체화 관계 (Realization)
인터페이스 상속 받을 때.


------------------------------------------------------
A패키지 안에 있는 A 클래스가 B패키지 안에있는 B와 의존관계가 있을 때 패키지의 의존성이라고 한다.

좋은 의존성을 위한 방법

1. 양방향 의존성을 피하라.
(A가 바뀌면 B가 바뀌고, B가 바뀌어도 A가 바뀌는 상황)
성능이슈, 싱크 등 문제가 굉장히 많다.

2. 다중성이 적은 방향을 선택하라.
A가 B의 변수 여러개를 참조하는것 X
A,B,C,D,E 가 E의 변수 한개를 참조하는것 O

3. 의존성이 필요없다면 제거하라.

4. 패키지 사이에는 양방향의존성(의존성 사이클)이 있으면 아예 안된다.
그냥 차라리 하나의 패키지로.


관계에는 방향성이 필요하다.
관계의 방향 = 협력의 방향 = 의존성의 방향


메세지를 보내고 받기로 결정한 이후, 그에 맞는 메소드를 만든다.

