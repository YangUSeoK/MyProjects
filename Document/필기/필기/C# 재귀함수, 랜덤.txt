재귀함수

함수를 반복해서 호출 
-> 단계적으로 다음 단계 문제를 해결할 수 있음

호출할 때 매개변수를 다음단계 변수로 호출

SumRecursive
   return SumRecursive
	     return SumRecursive
		    return SumRecursive



메소드 안에는 탈출문과 다음단계 계산,호출 부분을 나눠서 구성

int SumRecursive(int num){

if(num == 0){     // 탈출문 
return;
}

// 실제 코드내용
// 내 전단계까지 계산해서 가져와라. 난 내것만 더하겠다.
return SumRecursive(num - 1) + num






탈출문이 매우 중요하다.

재귀함수의 장점
개념적으로 이해하기 유용하다.
증명이 가능하다.(수학적 귀납법)
큰문제를 쪼개서 작은 문제로 해결이 가능하다.

단점 
비효율적이다.
SOF


반복문 사용할 경우
간단한 반복문으로 작성 가능할 때
함수 호출의 최대 깊이를 확정할 수 없을때
성능상 문제가 있을 때

그외 
재귀함수


======================================
Random rd = new Random();

() 안에 시드값 에 따라 난수를 생성한다.
시드값 안넣고 돌리면 컴퓨터 시간을 대입한다.
(C에서 time을 시드로 넣어줬던것과 같음)

시드값이 변하지 않는다면, 결국 함수니까 난수는 항상 같은 수가 나온다.

Random.Next(a);
인자로 정수를 넣으면 0 이상, a 미만 까지의 수를 반환한다.
Random.Next(a,b)
a이상 b미만의 수 를 반환한다.