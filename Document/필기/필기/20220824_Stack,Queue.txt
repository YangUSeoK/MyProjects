오후 2:28 2022-08-24
자료구조 : 데이터를 관리하는 구조를 개발하는 것

스택 
입력 : Push 
출력 : Pop

큐
입력 : Put
출력 : Get


함수 안에서 동적배열 만들 때는 2차원포인터
밖에서 만들어놓은거 접근해서 변경할 때는 포인터 사용해도 된다.

===========================
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <limits.h>

#define MAX_LEN 10


int StackPush(char* const _stackArr, int* const _pStackIndex, const int _push);
int StackPop(char* const _stackArr, int* const _pStackIndex);
int PrintStack(const char* const _stackArr, const int _stackIndex);

int main() {

	// 스택 (Stack) First In Last Out
	
	int stackIndex = 0;
	int push = 0;
	int pop = 0;
	char* stackArr = NULL;


	while ((stackArr = (char*)malloc(sizeof(*stackArr) * MAX_LEN)) == NULL) {
		printf("Dynamic Allocate is not Seccess!\n\n");
		Sleep(3000);
	}

	memset(stackArr, 0, sizeof(*stackArr) * MAX_LEN);
	
	PrintStack(stackArr,stackIndex);


	for (int i = 0; i < 10; ++i) {
		printf("스택에 넣을 수 입력 :");
		
		while (scanf_s("%d", &push) <= 0) {
			printf("숫자를 입력하세요.\n\n");
			while (getchar() != '\n');
		}

		StackPush(stackArr, &stackIndex, push);
		PrintStack(stackArr,stackIndex);
	}

	for (int i = 0; i < 5; ++i) {
		StackPop(stackArr, &stackIndex, &pop);
		PrintStack(stackArr, stackIndex);
	}

	for (int i = 0; i < 2; ++i) {
		printf("스택에 넣을 수 입력 :");
		scanf_s("%d", &push);

		StackPush(stackArr, &stackIndex, push);
		PrintStack(stackArr, stackIndex);
	}
	for (int i = 0; i < 15; ++i) {
		StackPop(stackArr, &stackIndex);
		PrintStack(stackArr, stackIndex);
	}


	
	

	if (stackArr != NULL) {
		free(stackArr);
		stackArr = NULL;
	}
	
	return 0;

}//main



// 포인터 상수 : const를 어디에 붙이냐에 따라 
// 포인터의 주소를 상수화할지, 포인터가 가리키는 값을 상수화 할지 결정
int StackPush(char* const _stackArr, int* const _pStackIndex, const int _push) {
	if (_stackArr == NULL) {
		printf("_stackArr is NULL!\n\n");
		return -1;
	}

	if (_pStackIndex == NULL) {
		printf("&_stackIndex is NULL!\n\n");
		return -2;
	}
	
	if (0 > *_pStackIndex && *_pStackIndex <= MAX_LEN) {
		printf("Index number error!\n\n");
		return -3;
	}

	*(_stackArr + *_pStackIndex) = _push;
	++(*_pStackIndex);

	return 0;
}


int StackPop(char* const _stackArr, int* const _pStackIndex) {
	if (_stackArr == NULL) {
		printf("_stackArr is NULL!\n\n");
		return -INT_MIN;
	}

	if (_pStackIndex == NULL) {
		printf("&_stackIndex is NULL!\n\n");
		return -INT_MIN;
	}

	if (0 >= *_pStackIndex && *_pStackIndex < MAX_LEN) {
		printf("Index number error!\n\n");
		return -INT_MIN;
	}

	--(*_pStackIndex);
	return *(_stackArr + *_pStackIndex);
	//*(_stackArr + *_pStackIndex) = 0;
	
}

int PrintStack(const char* const _stackArr, const int _stackIndex) {
	

	for (int i = 0; i < _stackIndex; ++i) {
		printf("[%d] ", *(_stackArr + i));
	}
	if (_stackIndex == 0) {
		printf("Stack is empty!\n");
	}
	printf("\n\n");


	return 0;

}
==============================

#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <limits.h>

#define MAX_LEN 10


// 조건부 컴파일 (Conditional Compile)
#define DEBUG_MODE


int Put(int* const _pQueue, int* const _pQueueIndex, const int _data);
int Get(int* const _pQueue, int* const _pQueueIndex);
int PrintQueue(const int* const _pQueue, const int _pQueueindex);

int main() {

	// 큐 (Queue) : Fist In First Out

	int queueIndex = 0;
	int* queue = (int*)malloc(sizeof(*queue) * MAX_LEN);
	
	for (int i = 0; i < 50; ++i) {
		Put(queue, &queueIndex, i);

#ifdef DEBUG_MODE
		printf("index : %d\n\n", queueIndex);
#endif

	}
	PrintQueue(queue, queueIndex);
	printf("\n\n");



	for (int i = 0; i < 5; ++i) {
		printf("Get : %d\n", Get(queue, &queueIndex));
	}
	printf("\n");
	PrintQueue(queue, queueIndex);

	printf("\n\n");





	if (queue != NULL) {
		free(queue);
		queue = NULL;
	}

	return 0;
}//main


int Put(int* const _pQueue, int* const _pQueueIndex, const int _data) {

	if (_pQueue == NULL || _pQueueIndex == NULL) {
		return -1;
	}

	if (0 > *_pQueueIndex || *_pQueueIndex >= MAX_LEN) {
		return -2;
	}

	*(_pQueue + *_pQueueIndex) = _data;
	++(*_pQueueIndex);

	return 0;
}

int Get(int* const _pQueue, int* const _pQueueIndex) {

	if (_pQueue == NULL || _pQueueIndex == NULL) {
		return -1;
	}

	if (*_pQueueIndex <= 0 || (*_pQueueIndex) > MAX_LEN) {
		return INT_MIN;
	}


	int returnValue = *(_pQueue+0);

	for (int i = 0; i < (*_pQueueIndex) - 1; ++i) {
		*(_pQueue + i) = *(_pQueue + i + 1);
	}
	--(*_pQueueIndex);
	
	return returnValue;
}

int PrintQueue(const int* const _pQueue, const int _queueIndex) {

	if (_pQueue == NULL) {
		return -1;
	}

	if (_queueIndex > MAX_LEN) {
		return -1;
	}

	//if (_queueIndex == 0) {
	//	printf("Queue is empty!\n");
	//	return 0;
	//}


	for (int i = 0; i < _queueIndex; ++i) {
		printf("[%d] ", *(_pQueue + i));
	}
	return 0;

}