
=========================
Mesh : Triangle(Vertex로 이루어진 한 삼각형)의 집합

Polygon : 다각형 (3D에서는 삼각형을 뜻한다)
Triangle(Polygon)의 집합으로 만들어진 덩어리

3d모델링 할 때는 사각형 기준으로 계산한다.
3d 디자이너한테 말 할 때는 사각형 기준으로 말해줘야함.

폴리곤이 많은 것(ex 영화, 시네마틱) : 하이폴 
    적은것(ex 게임) : 로우폴 이라고 부름. 로우폴인데 퀄리티는 하이폴 처럼 보이게 하는 기법들이 발달(bump mapping : 그림자 처리를 하이폴처럼 처리해서 퀄리티가 좋아보이게 함)


사각형을 만들려면 : Vertex 6개를 만들어야 함. (겹쳐있어도 따로 연산하기 때문)

Vertext 가 겹치면 그만큼 똑같은 연산을 여러번 해야한다.
=> V1, V2, V3, V4 의 위치를 저장하는 배열 하나(Vertext buffer)
    위 배열을 찾아 갈 수 있는 인덱스를 저장해놓는 배열 하나 (Index buffer)

Vertex buffer = [V1, V2, V3, V4]
Index buffer  = [0, 1, 2, 1, 2, 3]

=> 앞의 세개로 V1, V2, V3 좌표를 Vertext로 가지는 삼각형 1개
    뒤의 세개로 V2, V3, V4 좌표를 Vertex로 가지는 삼각형 1개
를 그릴 수 있다.


Vertex buffer 한번만 만들어두면 점 찍는건 Index buffer 3개(int, int, int) 만 가지고 만들 수 있어서 훨씬 빠르고 저렴하게 만들 수 있다.

회전, 등을 한다고 해도 Vertex buffer에서 계산하면 알아서 다 적용되니까 훨씬 빠름



Material 
각 Vertex 가 가지고 있는 속성들을 저장해 둔 테이블






======================================

Vertex 하나당 가지고 있는 정보
x,y,z 좌표 값 : Vector3(float, float, float) [12Byte] +
색상 정보 : int(Vertex Color(RGB) + 투명도 [4Byte]) + 
Normal Vector : Vector3(float, float, float) [12Byte] +
Texture : Vector2(float, float) [8Byte]
가중치 : 

들 을 포함하고있다. 


색상정보
Vertex 세 점의 색상을 계산해서 면 자체를 같은 색으로 표현한다 => Flat Shaping

Vertex 세 점의 색상을 각각 표현한다 => Gouraud Shading
Interpolation (색상보간) >> Vertex 사이의 공간을 계산하여 색을 채워준다.



Normal Vector - 조명계산용
면의 앞면/뒷면 : 법선벡터가 있느냐 없느냐 로 면의 방향을 결정. 있으면 앞면, 없으면 뒷면  
=> 벡터 외적을 면 마다 계산하면 끝도 없다.  그래서 Index buffer에서 들어오는 순서를 가지고 벡터 외적 방향을 계산하는 식으로 해서 연산량을 줄인다.

Index buffer에 넣는 순서만 조절하면 외적의 방향까지 알아서 계산이 되는 식. 시계방향으로 넣으면 CW(Clock Wise), 반시계방향은 CCW(Counter Clock Wise) 라고 한다.



Texture
3D에 2D 이미지를 넣기위해(=커졌다 작아졌다 표현 등을위해)
UV좌표계(0~1, 비율값) 사용

    유니티
    OpenGL : 좌측하단이 0,0 (U,V)

    언리얼
    DirextX : 좌측 상단이 0,0, 아래가 양수(U,V)

    Vertex로 이루어진 삼각형(사각형) 에도 UV 좌표를 적용해서
    원래 이미지의 (0.5 , 0.5) 위치의 픽셀 색깔 
    => Vertex 사각형 (0.5, 0.5) 위치에 찍는다.

    이걸 Texture Mapping 이라고 한다. 
    (Pixel Shader 타이밍에 처리, 3D Rendering 파이프라인 끝부분에 있다.)

-> OpenGL 공부해보면 도움이 됨.
(OpenGL, DirextX : 3D그래픽스를 위한 라이브러리 
 -> 이걸 사용해야 그래픽카드 가속을 받을 수 있음.)

OpenGL : 3D그래픽 기술 근본
DirextX : MS가 OpenGL 기술 가지고 만들어서 행렬, UV 방향 틀어서 수정해서 나옴. 
게임에는 행렬을 뒤집힌 상태에서 계산하므로, 속도가 더 빠르다.


가중치 : 관절을 움직일 때 바깥쪽은 많이 움직이고, 안쪽은 적게 움직인다.


==========================================
컴포넌트 추가할 때
GetComponent< >(); = 아무데나 해도 됨
gameObject.AddComponent< >();  = gameObject 뒤에 써야함



Template : < >
C 에서 자료구조 만들 때 int 형을 관리할 수 있는걸 만들었다.
float 을 관리하려면 또 만들어야 함
이걸 보완하여 일반화 시켜서 만들어둔것이 템플릿.
List<int> intList = new List<int>();  // int 를 관리하는 리스트
List<GameObject> goList = new List<GameObject>();  // GameObject 를 관리하는 리스트

이런 템플릿을 가지고 만든 프로그램을 Generic 프로그래밍 이라고 한다.

========================================

(255,255,0) = 마젠타
이 색깔이 나오면 Material 이 없다 라는 뜻.
if(마젠타) 픽셀찍기를 건너뛰어라 라는 식으로 만들었음.

쉐이더 명 : Material - Shader 에서 트리 제일 끝쪽에 있는 애들이 이름임. 유니티 기본은 Standard


이미지 받아와서 Assets 아래 Resources 에 넣음
클릭해보면 인스팩터에 Advanced 


메모리에 텍스쳐가 올라오는거 - 텍스쳐바인딩
텍스쳐 한 줄 읽어오기 - 텍스쳐 스캔라이닝

픽셀 하나당 3Byte 인데 이미지 마지막에 딱 떨어지기 위해서
텍스쳐 사이즈를 2^x의 배수로 패딩을 해준다.
(큰 수 중에 제일 작게)

캐릭터는 세로로 기니까 가로길이 남는게 아깝다 >> 종이 한장에 여러장의 캐릭터 그림을 그려두고, 필요한 부분을 잘라서 가져온다.
>> 계속 그림 안불러와도 되니까 속도도 빠름
"sprite sheet"



--------------------------------------
﻿
Polygon : 다각형 (3D에서는 삼각형을 뜻한다)

Triangle(Polygon)의 집합으로 만들어진 덩어리


3d모델링 할 때는 사각형 기준으로 계산한다.

3d 디자이너한테 말 할 때는 사각형 기준으로 말해줘야함.


폴리곤이 많은 것(ex 영화, 시네마틱) : 하이폴

    적은것(ex 게임) : 로우폴 이라고 부름. 로우폴인데 퀄리티는 하이폴 처럼 보이게 하는 기법들이 발달

(bump mapping : 그림자 처리를 하이폴처럼 처리해서 퀄리티가 좋아보이게 함)



사각형을 만들려면 : Vertex 6개를 만들어야 함. (겹쳐있어도 따로 연산하기 때문)


Vertext 가 겹치면 그만큼 똑같은 연산을 여러번 해야한다.

=> V1, V2, V3, V4 의 위치를 저장하는 배열 하나(Vertext buffer)

위 배열을 찾아 갈 수 있는 인덱스를 저장해놓는 배열 하나 (Index buffer)


Vertex buffer = [V1, V2, V3, V4]

Index buffer = [0, 1, 2, 1, 2, 3]


=> 앞의 세개로 V1, V2, V3 좌표를 Vertext로 가지는 삼각형 1개

뒤의 세개로 V2, V3, V4 좌표를 Vertex로 가지는 삼각형 1개

를 그릴 수 있다.



Vertex buffer 한번만 만들어두면 점 찍는건 Index buffer 3개(int, int, int) 만 가지고 만들 수 있어서 훨씬 빠르고 저렴하게 만들 수 있다.


회전, 등을 한다고 해도 Vertex buffer에서 계산하면 알아서 다 적용되니까 훨씬 빠름

﻿




﻿



Template : < >

C 에서 자료구조 만들 때 int 형을 관리할 수 있는걸 만들었다.

float 을 관리하려면 또 만들어야 함

이걸 보완하여 일반화 시켜서 만들어둔것이 템플릿.

List<int> intList = new List<int>(); // int 를 관리하는 리스트

List<GameObject> goList = new List<GameObject>(); // GameObject 를 관리하는 리스트


이런 템플릿을 가지고 만든 프로그램을 Generic 프로그래밍 이라고 한다.


// < > : Template, Generic Programming
        // C#, 유니티에서 제공하는 것 외에도
        // 우리가 만든 것들도 (컴포넌트, 자료형 등등 뭐든)도 똑같이 넣으면 읽어올 수 있다.
﻿



===============================
﻿



=======================
GetComponent 와 AddComponent 차이점

컴포넌트 추가할 때

GetComponent< >(); = 아무데나 해도 됨

gameObject.AddComponent< >(); = gameObject 뒤에 써야함



GetComponent
현재 씬의 오브젝트 중 누군가가 쓰고있는 컴포넌트를 가져온다.
아무데도 없으면 null 반환

AddComponent
컴포넌트를 오브젝트에 추가한 후에 가져오고, 추가가 안되면 null
이미 오브젝트가 해당 컴포넌트를 가지고 있다면, 추가가 안되므로 null 이 뜬다!

﻿

