#include <stdio.h>
#include <stdlib.h>


int sum(int targetFloor);												// 입력받은 층 수를 표시하기 위한 배열의 크기를 구하는 함수 sum 선언



int main() {


	int targetFloor;
	printf("피라미드 층 수를 입력하세요. : ");
	scanf_s("%d", &targetFloor);
	printf("%d 층까지 쌓겠습니다.\n", targetFloor);						//배열의 크기를 입력받기.

	char* star = (char*)malloc(sum(targetFloor));						// char은 1byte니까 1 * sum(targetFloor) 가 전체 배열의 크기가 된다.
	memset(star,0,sum(targetFloor));									// 동적할당 된 star 배열 초기화
	
	int floor = 0;													// for 문에서 사용할 floor 변수 선언. 양쪽 for문 모두에서 사용해야 하므로 main() 지역변수로 선언.

	for (int i = 0,  stack = 0; i<sum(targetFloor); ++i) {			// i > stack 이면 *, i==stack 이면 \n
		if (floor > stack) {											// 현재 층 수가 별 개수보다 크면
			star[i] = '*';												// 배열에 *을 저장하고 별 개수 1개 증가. 그후 배열의 다음칸으로 넘어간다.
			++stack;
		}
		else if (floor == stack) {										// 현재 층 수와 별의 수가 같다면
			star[i] = '\n';												// 배열에 개행문자를 저장하고 층수를 1개 증가, 별 개수를 0개로 초기화.
			++floor; 
			stack = 0;
		}
		else {
			printf("오류\n");
			break;
		}

	}

	for (int i = 0; i < sum(targetFloor); ++i) 							// 배열을 순서대로 출력한다.
		printf("%c", star[i]);
		


	//printf("\n\n==== 배열 동적할당 =============\n\n");
	//int size = 0;
	//printf("배열의 크기를 입력하세요.: ");
	//scanf_s("%d", &size);
	//int* arr = (int*)calloc(sizeof(int) * size, sizeof(int));

	//for (int i = 0; i < size; ++i) {
	//	printf("%d  ", arr[i]);
	//}
	//printf("\n\n==== 배열에 값 대입 후 출력 =============\n\n");

	//for (int i = 0; i < size; ++i) {
	//	arr[i] = i * 2;
	//	printf("%d  ", arr[i]);
	//}


	free(star);															// malloc의 메모리 할당을 끝낸다.





		printf("\n\n");

	return 0;
}


int sum(int targetFloor) {												// 인자로 입력받은 targetFloor를 받아온다.
	int sum = 0;														// return 할 sum 값을 선언 및 초기화

	for (int i = 0; i <= targetFloor; ++i) {							// targetFloor 만큼 필요한 배열의 크기를 반복하여 계산 후 sum에 저장
		sum = sum + (i + 1);
	}
	return sum;															// sum을 리턴한다.
}