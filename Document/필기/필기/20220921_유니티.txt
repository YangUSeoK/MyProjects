오전 9:30 2022-09-21

디버그

유니티 디버그랑 비쥬얼스튜디오 안에서 디버그랑
차이가 날 수 있다.

유니티에서 빌드셋팅
씬 여러개 쓸거면 씬 다 올려줘야함

빌드 끝나고나서 _Data 폴더랑 .exe 파일 이름 똑같이 해야함

유니티 내에서 플레이 할때랑 실행파일 빌드해서 만든 후랑 차이가 있을수도 있으니까 빌드하고도 꼭 확인해볼 것



------------------------------------------
코루틴으로 움직이던거 멈췄다 다시 움직이기

코루틴은 Update 이후, LateUpdate 시작 전 수행되는데, 모든 코루틴이 이때 순차적으로 수행된다.
Yield return 을 만날 때 까지 수행되고, 그다음 LateUpdate -> Yield return 조건이 끝난 후 다음 Update 이후에 다시 yield return 뒤부터 수행된다.

====================================


Object 한 개체가 가지고 있는 정보 이외의 무언가를 관리해야 할 때
(ex. 필드위의 그 Object 개수 파악, 그 Object 중 다른 특별한 무언가를 해야 할 개체를 반복문으로 선변할 때 등등)


Item 상속받기
인터페이스는 Monobehavir나 위에 Using.Engine 등등 없어도됨


프리팹이든 뭔가 만들 때 루틴 습관 들여놓으면 좋음

클래스명, 함수명은 풀네임이 편함
멤버변수명, 객체명은 줄여도 됨


아이템매니저 : 아이템에 관한 생성 등등 총괄하는놈
이매니저 저매니저 등등 많아졌을 때
매니저를 관리하는 놈 = 디렉터, 게임매니저

등급을 나누는 기준
객체가 어디에 들어가있느냐

나랑 동급인놈한테 물어보려면 - 내 상위(그놈상위) 한테 물어보기


Player가 필드 전체에 있는 Enemy 중 체력 50% 이하인 적을 죽이는 스킬을 발동 했다는것을 상위(GameManager) 에게 알림

-> GameManager는 그 알림을 듣고 EnemyManager에게 니가 가지고 있는 애들중에 체력 50% 이하인 놈들을 찾아와라고 알림

-> EnemeyManager는 그 알림을 듣고 실제로 체력이 절반이하인놈들에게 Die명령 실행


커플링을 줄이기 위해서는 
나는 상대방을 모르고, 대신 나와 상대방을 다 알고있는 누군가(GameManager)만 있으면 된다.
나는 GameManager 에게 부탁하고, GameManager가 알아서 해줌




객체 붙이는 방법 3가지

1. 인스팩터에 갔다던지기 -> 나중에 유지보수를 위해 빈 클래스라도 일단 만들어두는게 편하다.
미리 객체가 만들어져있어야 한다.
장점 > 코드 밖에서 손을 댈 수 있다.
(인스팩터에서 수정 가능>>기획자 등등 다른사람이 수정 가능)
단점 > 코드 밖에서 손을 댈 수 있다. (인스팩터에서 적힌대로 함)


2. 스크립트로 새로 만들기
        GameObject go = new GameObject("Player");
        player = go.AddComponent<Player09>();


3. Find 로 찾기 (게임에선 금기. 절대 안좋음)




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
팩토리패턴
내가 어떻게 만드는지 몰라도, 생성함수만 호출하면 알아서 던져준다.

리소스 관리 : 리소스매니저 >> 싱글턴

class 에서의 static 특징
객체를 만들지 않아도 클래스명.변수명 으로 접근이 가능하다.


싱글턴 만들 때
1. instance 를 private static 으로 만듬
2. public 프로퍼티 get 을 만듬
3. 생성자를 private 로 만들어서 외부에서 생성하지 못하도록 함


매니저를 통해서 전체적으로 관리하면 좋은 점
프리팹 로드, 생성 등을 하는 타이밍을 관리하기 쉽다.
-> 게임 시작할 때 한번에 왕창 로드해버린 후 게임중에는 신경안쓰게 하기 등


게으른 초기화


관리를 할 때는 파괴하는것도 관리가 되어야 한다.
(List에서도 제외가 되어야 함)

플레이어가 아이템을 사용했다면, 그 타이밍을 알려준다.
>> 델리게이트 사용



Item은 전부 사용 후에 파괴된다 => 그래서 Item 클래스에서 Destroy 함수를 기본적으로 달 수 있음

>>단점
부모의 함수를 재정의해서 확장하여 사용할 때는, base.Use() 를 먼저 실행하고 그 후에 확장된 내용을 실행하는게 보편적인데, 
Destroy 가 되버리면 뒤에 확장된 내용 실행전에 파괴되어 버린다.

그래서 확장된 내용 이후에 base.Use() 를 써야하는데, 이렇게 되면 개발을 할 때 아이템을 만든 이후에 마지막에 base.Use() 를 써줘야한다 라고 개발자가 외우고 있어야한다.

이런거 관련된 디자인패턴도 있음.









#region  PUBLIC_AREA
 #endregion