포폴, 면접에서 말할 거

1차포폴
어려웠던거 
1. 첫번째 포폴에서 볼륨라이트 구현할 때
메쉬의 경우 로컬좌표계가 기본이라 0,0,0 이 트랜프폼의 위치고 회전값도 따라오지만, 레이포인트를 쏘는 방향을 구하기 위해서는 
3차원 공간에서의 포인트 좌표가 필요했고 이 좌표를 구하는 것이 쉽지 않았다.
오히려 각 포인트들을 이어서 메쉬를 만들고 콜라이더를 적용하는 것은 그리 어렵지 않았음.

공부를 하던 중 회전행렬 이라는 것을 알게 되었고, 이를 통해 해결할 수 있었다.
수학이 약해서 처음에 이해하는게 오래 걸렸지만, 덕분에 수학을 더 공부하고 이해할 수 있는 계기가 되었다.


2차포폴
스크립트명부터 짓기 어렵다
Usurper도 메테오가 있고 TerrorBringer도 메테오가 있음
같은 메테오인데 다른 스크립트니까 이름을 다르게 지어야 했다
함수명도 짓기 어렵다
이게 그냥 발생하는 함수인지, 콜백인지 등등에 따라 같은 기술에도 엄청 많은 함수가 필요했다. 함수명 짓는 규칙이 필요했다.

구조를 짜기가 생각보다 훨씬 더 힘들었고, 그 이유가 기획서의 부실이라는 점을 알았다.
분명히 한 보스의 코드를 쓸 때는 잘 짰다고 생각했는데, 그 후에 다른 보스를 만드려고 하니 처음부터 다시 짜야하는 일이 빈번했다. 오히려 잘 짜려고 만들어둔 구조가 복잡하기만 해서 실수가 생기고 꼬여버리는 등 독이되는 경우도 많았다.


델리게이트 써서 다 뺀 이유
명확한 호출시점을 정할 수 있고, 모듈별로 딱 필요한 기능만 모아둘 수 있어서 그렇게 만들었다. 오브젝트 계층구조 상, 자식 오브젝트는 부모를 알 수 없고, 알 필요도 없다. 그냥 자기가 할 일만 하고 필요할 경우 Callback으로 부모에게 전달만 해주면 된다. 그럼 부모가 그 정보들을 받아서 알아서 처리를 해준다.

단점 : 가독성이 매우 좋지 않고, 시간이 지난 후 다시 이 코드를 봤을 때 이해하기가 쉽지 않음
이에 대한 대책 : 함수 이름을 명확하게 쓸 수 있도록 하고, #region을 이용하여 어디서 콜백을 받는 함수인지, 어디로 연결되는 함수인지 코드를 정리한다.
어디서 어떻게 델리게이트가 연결되었는지 문서화하여 관리하면 나중에 코드를 볼 때 도움이 될 것같다.







